/*ЛАБОРАТОРНАЯ РАБОТА №5
«Создание таблиц с помощью SQL-запросов»
В отчете должен быть представлен текст SQL-запросов для создания всех таблиц разработанной базы данных.
Также в CREATE TABLE должны быть определены значения полей по умолчанию, 
ограничения уникальности и проверочные ограничения (в CREATE TABLE для базы данных должно быть определено хотя бы по одному ограничению каждого вида). 
Значения полей по умолчанию, ограничения уникальности и проверочные ограничения на таблицы с данными по сотрудникам и 
должностям к рассмотрению не принимаются.*/

Alter Table Урок
Drop FK_Урок_Расписание
GO

Alter Table Олимпиада
Drop FK_Олимпиада_Учитель
, FK_Олимпиада_Предмет
, FK_Олимпиада_Ученик
GO

Alter Table Учитель
Drop FK_Учитель_Должность
, FK_Учитель_Предмет
GO

Alter Table Расписание
Drop FK_Расписание_Учитель
, FK_Расписание_Предмет
, FK_Расписание_Кабинет
, FK_Расписание_Класс
GO

Alter Table Ученик
Drop FK_Ученик_Класс
GO

Alter Table Оценки
Drop FK_Оценки_Ученика
, FK_Оценки_Урок
GO

Drop Table Расписание
GO
Drop Table Олимпиада
GO
Drop Table Учитель
GO
Drop Table Оценки
GO
Drop Table Ученик
GO
Drop Table Урок
GO
Drop Table Предмет
GO
Drop Table Класс
GO
Drop Table Кабинет
GO
Drop Table Должность
GO

Create Table Расписание
(Код int Identity Primary Key
, [Номер урока] int Not NULL
, [Код учителя] int Not NULL
, [Код предмета] int Not NULL
, [Код кабинета] int Not NULL
, [Код класса] int Not NULL
, Время time Not NULL
)
GO

Create Table Олимпиада
(Код int Identity Primary Key
, Название varchar(50) Not NULL
, [Код учителя] int Not NULL
, [Код предмета] int Not NULL
, Дата date Not NULL
, [Код ученика] int Not NULL
, Результат int Not NULL Check (Результат >= 0 AND Результат <= 100) 
)
GO

Create Table Учитель
(Код int Identity Primary Key
, ФИО varchar(50) Not NULL
, Адрес varchar(50) Not NULL
, Телефон varchar(50) Not NULL
, [Код должности] int Not NULL
, [Код предмета] int Not NULL
)
GO

Create Table Оценки
(Код int Identity Primary Key
, [Код ученика] int Not NULL
, [Код урока] int Not NULL
, Балл int Not NULL Default 1
)
GO

Create Table Ученик
(Код int Identity Primary Key
, ФИО varchar(50) Not NULL
, Пол varchar(8) Not NULL
, [Дата рождения] date Not NULL
, Адрес varchar(50) Not NULL
, [Код класса] int Not NULL
, [Год поступления] int Not NULL
, [Год выпуска] int 
)
GO

Create Table Урок
(Код int Identity Primary Key
, Дата date Not NULL
, [Код расписания] int Not NULL
)
GO

Create Table Предмет
(Код int Identity Primary Key
, Дисциплина varchar(50) Not NULL
)
GO

Create Table Класс
(Код int Identity Primary Key
, Класс varchar(8) Not NULL
)
GO

Create Table Кабинет
(Код int Identity Primary Key
, Номер varchar(8) Not NULL unique
)
GO

Create Table Должность
(Код int Identity Primary Key
, Должность varchar(50) Not NULL
)
GO

/*ЛАБОРАТОРНАЯ РАБОТА №7
«Определение связей между таблицами с помощью SQL запросов»
В отчете должен быть представлен текст SQL-запросов для определения связей между таблицами (ALTER TABLE + CONSTRAINT).
Также в ALTER TABLE должны быть определены ограничения уникальности и проверочные ограничения 
(в ALTER TABLE для базы данных должно быть определено хотя бы по одному ограничению каждого вида).
Ограничения уникальности и проверочные ограничения на таблицы с данными по сотрудникам и должностям 
к рассмотрению не принимаются.*/

Alter Table Урок
Add Constraint FK_Урок_Расписание Foreign Key ([Код расписания]) References Расписание(Код)
GO

Alter Table Олимпиада
Add Constraint FK_Олимпиада_Учитель Foreign Key ([Код учителя]) References Учитель(Код)
, Constraint FK_Олимпиада_Предмет Foreign Key ([Код предмета]) References Предмет(Код)
, Constraint FK_Олимпиада_Ученик Foreign Key ([Код ученика]) References Ученик(Код)
, Constraint Уникальное_Название Unique (Название)
GO

Alter Table Учитель
Add Constraint FK_Учитель_Должность Foreign Key ([Код должности]) References Должность(Код)
, Constraint FK_Учитель_Предмет Foreign Key ([Код предмета]) References Предмет(Код)
GO

Alter Table Расписание
Add Constraint FK_Расписание_Учитель Foreign Key ([Код учителя]) References Учитель(Код)
, Constraint FK_Расписание_Предмет Foreign Key ([Код предмета]) References Предмет(Код)
, Constraint FK_Расписание_Кабинет Foreign Key ([Код кабинета]) References Кабинет(Код)
, Constraint FK_Расписание_Класс Foreign Key ([Код класса]) References Класс(Код)
GO

Alter Table Ученик
Add Constraint FK_Ученик_Класс Foreign Key ([Код класса]) References Класс(Код)
GO

Alter Table Оценки
Add Constraint FK_Оценки_Ученика Foreign Key ([Код ученика]) References Ученик(Код)
, Constraint FK_Оценки_Урок Foreign Key ([Код урока]) References Урок(Код)
, Constraint Диапазон_Оценок Check (Балл >= 1 AND Балл <= 10)
GO

/*ЛАБОРАТОРНАЯ РАБОТА №8
«Использование SQL-запросов для модификации данных»
В отчете должен быть представлен текст SQL-запросов для занесения данных в базу данных – INSERT INTO…VALUES, 
модификации записей в какой-либо одной таблице – UPDATE, удаления записей из какой-либо одной таблицы – DELETE 
(запросы модификации и удаления записей для таблиц с данными по сотрудникам или должностям к рассмотрению не принимаются).
В результате выполнения работы в каждую таблицу должно быть занесено не менее 2-х записей, 
в каждую дочернюю таблицу должно быть занесено больше записей, чем в любую из её родительских таблиц.*/

Insert Into Предмет
Values('Русский язык')
,('Математика')
,('Информатика')

Insert Into Должность
Values('Учитель русского языка')
,('Учитель математики')
,('Учитель информатики')

Insert Into Учитель
Values('Никитина Мария Николаевна','ул.Мазурова 71-53', '+375299761795', 1, 1)
,('Денисенко Наталья Николаевна', 'ул.Олимпийская 17-12', '+375445712470', 2, 2)
,('Гудинская Елена Эдвардовна', 'ул.Свиридова 1-46', '+375258457125', 3, 3)
,('Жадейко Ростислав Ананьевич', 'ул.Олимпийская 29-56', '+375299012673', 1, 1)

Insert Into Кабинет
Values('2-3')
,('2-14')

Insert Into Класс
Values('2В')
,('11Б')

Insert Into Ученик
Values('Губанова Александра Денисовна', 'женский', '20021219', 'ул. Огоренко 7-2-52', 2, 2009, 2020)
,('Ревунова Вероника Андреевна', 'женский', '20021110', 'ул. Головацкого 32-56', 1, 2009, 2020)
,('Полховский Иван Павлович', 'мужской', '20150512', 'ул. Чечерская 15-27', 2, 2021, Null)

Insert Into Олимпиада
Values('Кенгуру', 2, 2, '20220212', 1, 45)
,('Бусленок', 3, 2,'20220111', 2, 60)
,('Инфомышка', 3, 3,'20220301', 3, 12)
,('Журавлик', 2, 1, '20211202', 3, 4)
,('Юный физик', 1, 2,'20211015', 1, 98)
,('Робототехник', 2, 2, '20221125', 1, 32)
,('Колосок', 1, 2, '20211202', 3, 37)
,('Жаворонок', 2, 1,'20211015', 1, 100)
,('Умники', 2, 2, '20221125', 1, 29)

Insert Into Расписание
Values(1, 3, 3, 2, 1, '8:00:00')
,(2, 1, 1, 1, 2, '9:00:00')
,(3, 2, 2, 1, 1, '10:00:00')
,(4, 2, 2, 2, 1, '11:00:00')
,(5, 3, 3, 2, 2, '12:00:00') 

Insert Into Урок
Values('20211210', 1)
,('20211212', 2)
,('20220302', 2)
,('20220208', 5)
,('20220218', 4)
,('20211217', 3)

Insert Into Оценки
Values(2, 2, 4)
,(2, 4, 1)
,(3, 6, 5)
,(1, 1, 8)
,(1, 3, 8)
,(2, 5, 3)
,(3, 6, 10)

Update Предмет
Set Дисциплина = 'Информатика'
Where Дисциплина = 'Математика'

Delete Олимпиада
Where Результат < 20

/*ЛАБОРАТОРНАЯ РАБОТА №9
«Создание представлений (view)»
В отчете должен быть представлен текст SQL-запроса для создания представления.
Запрос в представлении должен возвращать данные не менее чем из 2-х таблиц базы данных 
(представление на основе таблиц с данными по сотрудникам и должностям к рассмотрению не принимается).
Отчет также должен содержать скриншот по выполнению запроса с использованием представления в среде Management Studio.*/


Drop view ИнформацияОбОценках
Go

--Результат - информация об оценках, содержащая информацию об учениках и уроках.

Create view ИнформацияОбОценках
As select ФИО, [Код класса], Дата, Балл
From Оценки, Ученик, Урок
Where Оценки.[Код ученика] = Ученик.Код AND Оценки.[Код урока] = Урок.Код
GO

Select *
From ИнформацияОбОценках
Go


/*ЛАБОРАТОРНАЯ РАБОТА № 11
«Создание простейшей хранимой процедуры на SQL-сервере»
В отчете должен быть представлен текст SQL-запроса для создания параметризованной хранимой процедуры. 
Процедура должна воспринимать параметр – код объекта из какой-либо родительской таблицы базы данных и 
возвращать соответствующие записи из какой-либо дочерней таблицы (например, получать код студента и 
возвращать его оценки).
Процедура на основе таблиц с данными по сотрудникам и должностям к рассмотрению не принимается.
Также в отчете должен быть представлен скриншот по вызову разработанной процедуры в среде Management Studio.*/

Drop Proc УченикиКласса
GO

-- Параметр - код класса
-- Результат - ученики класса

Create Proc УченикиКласса @Код int
AS
Select ФИО
  From Ученик
  Where @Код = Ученик.[Код класса]
Go

Exec УченикиКласса 2


/*ЛАБОРАТОРНАЯ РАБОТА № 13
В отчете должен быть представлен текст SQL-запроса для создания параметризованной хранимой процедуры. 
Процедура должна воспринимать 2 параметра – значения не ключевых полей двух родительских таблиц, 
по которым выполняется отбор записей дочерней таблицы, и возвращать соответствующие записи дочерней таблицы 
(например, получать фамилию преподавателя и фамилию студента, а возвращать оценки, 
выставленные заданным преподавателем указанному студенту).
Для параметров должны быть указаны значения по умолчанию (не NULL).
Если при вызове процедуры задано значение параметра NULL, отбор записей по этому параметру выполняться не должен 
(например, если в качестве фамилии преподавателя задано значение NULL, то должны быть возвращены все оценки 
заданного студента). Проверка значения NULL в параметрах должна выполняться в операторах IF, а не в условиях запросов.
Результирующий набор данных должен содержать все поля дочерней таблицы и поля родительских таблиц, 
по которым выполняется отбор записей (всегда один и тот же набор полей, даже если отбор по полям не выполняется).
Процедура на основе таблиц с данными по сотрудникам и должностям к рассмотрению не принимается.
В отчете также должны быть представлены скриншоты по вызову разработанной процедуры в среде Management Studio. 
Должны быть получены результаты при всех сочетаниях NULL / NOT NULL в параметрах, использованы позиционная, 
ключевая и смешанная формы задания параметров, использовано наличие значений по умолчанию.*/

Drop proc ИнформацияОбОлимпиадах
GO

-- параметр - название предмета, ФИО ученика
-- результат - информация об олимпиады с указанными параметрами

Create proc ИнформацияОбОлимпиадах @Дисциплина varchar(50) = 'Русский язык', @ФИО varchar(80) = 'Губанова Александра Денисовна'
AS
If @ФИО is not null AND @Дисциплина is not null
  Select Олимпиада.Код, Название, [Код предмета], Дисциплина, Дата, [Код ученика], ФИО, [Код учителя], Результат
	From Олимпиада, Предмет, Ученик
	  Where Олимпиада.[Код предмета] = Предмет.Код AND Олимпиада.[Код ученика] = Ученик.Код
AND Дисциплина = @Дисциплина AND ФИО = @ФИО
Else 
  If @ФИО is not null
    Select Олимпиада.Код, Название, [Код предмета], Дисциплина, Дата, [Код ученика], ФИО, [Код учителя], Результат
	  From Олимпиада, Предмет, Ученик
	    Where Олимпиада.[Код предмета] = Предмет.Код AND Олимпиада.[Код ученика] = Ученик.Код
AND ФИО = @ФИО
  Else
	If @Дисциплина is not null
	  Select Олимпиада.Код, Название, [Код предмета], Дисциплина, Дата, [Код ученика], ФИО, [Код учителя], Результат
	    From Олимпиада, Предмет, Ученик
	      Where Олимпиада.[Код предмета] = Предмет.Код AND Олимпиада.[Код ученика] = Ученик.Код
AND Дисциплина = @Дисциплина
    Else
	  Select Олимпиада.Код, Название, [Код предмета], Дисциплина, Дата, [Код ученика], ФИО, [Код учителя], Результат
	    From Олимпиада, Предмет, Ученик
	      Where Олимпиада.[Код предмета] = Предмет.Код AND Олимпиада.[Код ученика] = Ученик.Код
GO

Exec ИнформацияОбОлимпиадах 'Русский язык', 'Губанова Александра Денисовна'

Exec ИнформацияОбОлимпиадах Null, 'Губанова Александра Денисовна'

Exec ИнформацияОбОлимпиадах 'Информатика', Null

Exec ИнформацияОбОлимпиадах Null, Null

Exec ИнформацияОбОлимпиадах @Дисциплина = 'Информатика', @ФИО = 'Губанова Александра Денисовна'

Exec ИнформацияОбОлимпиадах 'Информатика', @ФИО = 'Полховский Иван Павлович'

Exec ИнформацияОбОлимпиадах 'Информатика'


/*ЛАБОРАТОРНАЯ РАБОТА № 14
«Реализация цикла просмотра записей в хранимой процедуре»
В отчете должен быть представлен текст SQL-запроса для создания хранимой процедуры, обрабатывающей совокупность значений 
числового поля какой-либо таблицы базы данных. В процедуре должен быть организован цикл просмотра записей таблицы 
(без использования курсора) с определением некоторой числовой характеристики по совокупности значений поля. 
Значение характеристики должно быть возвращено из процедуры с помощью оператора RETURN.
Варианты условий лабораторной работы приведены здесь. Если условие работы подразумевает некоторую упорядоченность записей таблицы 
(например, «найти номер первого нулевого элемента последовательности»), то подразумевается, 
что записи упорядочены по возрастанию значения первичного ключа таблицы.
Процедура может быть параметризована, в этом случае параметр в условии задачи обозначается @P.
Речь идет исключительно о цикле по записям. Не должно быть запросов с использованием группировочных функций по множеству записей, 
за исключением поиска ID очередной записи.
В отчете, кроме основного условия работы, должен быть указан номер варианта, приведен текст задания в соответствии с номером варианта 
и дано пояснение, какое числовое поле из какой таблицы обрабатывается.
Также в отчете должны быть представлены скриншоты по выполнению следующих действий:
1) Выполнения запроса для получения исходных данных из таблицы базы данных: поля первичного ключа и числового поля с 
элементами последовательности. Данные должны быть упорядочены по значению первичного ключа;
2) Вызов разработанной процедуры в среде Management Studio с сохранением в переменной значения, возвращенного процедурой, 
и отображением этого значения.*/

Drop Proc Summa
Go

--Результат - сумма элементов последовательности без двух последовательных элементов с минимальной суммой среди всех пар последовательных элементов

Create Proc Summa As
  Declare @код int, @предыдущий int, @текущий int, @мин_сумма int = null, @сумма int
  Select @код = min(Код)
    From Оценки
  While @код is not null
  Begin
    Set @предыдущий = @текущий
    Select @текущий = Балл
      From Оценки
      Where Код = @код
    If @мин_сумма is null
      Set @мин_сумма = @текущий + @предыдущий
    Else 
      If @текущий + @предыдущий < @мин_сумма
        Set @мин_сумма = @текущий + @предыдущий
    Select @код = min(Код)
      From Оценки
      Where Код > @код
  End
  Select @сумма = sum(Балл) - @мин_сумма 
    From Оценки
  Return @сумма
Go

Select Код, Балл 
  From Оценки
GO

Declare @result int
Exec @result = Summa
Select @result As Результат
GO

/*ЛАБОРАТОРНАЯ РАБОТА № 15
«Использование временных таблиц в хранимых процедурах»
В отчете должен быть представлен текст SQL-запроса для создания параметризованной хранимой процедуры. 
Процедура должна воспринимать параметр – код объекта из какой-либо родительской таблицы базы данных и возвращать соответствующие записи 
из какой-либо дочерней таблицы (например, получать код студента и возвращать его оценки).
Формирование выходных данных в процедуре должно выполняться в три этапа:
1) Занесение выходных данных во временную таблицу с помощью SELECT … INTO (например, оценок студента);
2) Модификация временной таблицы (например, удаление «двоек») c помощью UPDATE или DELETE запроса;
3) Возврат содержимого временной таблицы как результата работы процедуры.
Процедура на основе таблиц с данными по сотрудникам и должностям к рассмотрению не принимается.
В отчете также должен быть представлен скриншот по вызову разработанной процедуры в среде Management Studio.*/

Drop Proc Оценки_Ученика
GO

--Параметр - Код ученика
--Результат - Оценки ученика, которые больше 5 баллов

Create Proc Оценки_Ученика @код_ученика int As
  Select Код, [Код ученика], [Код урока], Балл Into #result
    From Оценки
    Where [Код ученика] = @код_ученика
  DELETE #result Where Балл <= 5
  Select * From #result
GO

Exec Оценки_Ученика 3
GO

 
